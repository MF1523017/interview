#include<iostream>
#include<random>
#include<ctime>
#include<vector>
using std::vector;
/*题目描述：
如何洗均匀一副扑克牌
---------------------------
0|1|2|3|4|5|6|7|8|9|10
每次产生的随机数，与最后一个元素互换位置
然后数组元素减小一个，随机数产生的范围减小一个，再次产生随机数，
与减小后的数组元素的最后一个元素互换，
算法时间复杂度O(N)
算法空间复杂度O(1)
三次结果如下：
**********************************************************
//42 49 9 38 47 50 23 37 52 15 13 44 0 7 16 41 24 17 19 45 
//1 6 11 31 22 27 46 43 3 2 48 51 14 25 10 20 4 34 29 5 32 
//28 12 36 40 30 21 33 8 35 26 18 53 39
**********************************************************
//9 0 2 42 24 31 4 29 33 37 26 52 3 22 20 28 27 38 39 12 17 
//40 8 14 1 36 10 19 46 44 51 13 32 7 5 45 6 34 41 30 49 23 
//43 16 47 48 50 18 35 25 15 11 21 53
***********************************************************
//44 37 49 5 52 51 1 2 32 43 8 20 48 47 39 9 34 7 19 36 27 6 
//17 12 24 41 50 38 30 35 25 0 23 16 11 45 31 40 26 13 28 22 
//14 4 29 10 42 18 21 53 33 15 3 46
*/

void swap(int &a, int &b)
{
	int tmp = a;
	a = b;
	b = tmp;
}
void  shuffled()
{
	vector<int> veci;
	//假设一副扑克牌被编号为0-53，放到vector中
	for (int i = 0; i < 54; ++i)
		veci.push_back(i);
	srand((unsigned)time(NULL));//设置种子
	for (int i = 0; i < 54; ++i) {
		//随机产生位置
		int r = rand() % (54-i);
		//与最后的元素交换
		swap(veci[r], veci[54-i-1]);
	}
	//显示
	for (auto b : veci)
		std::cout << b << " ";
}

int main(int argc, char **argv)
{
	shuffled();
	return 0;
}